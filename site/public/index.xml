<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse rdf4j</title>
    <link>https://rdf4j.eclipse.org/</link>
    <description>Recent content on Eclipse rdf4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>webdev@eclipse-foundation.org (Christopher Guindon)</managingEditor>
    <webMaster>webdev@eclipse-foundation.org (Christopher Guindon)</webMaster>
    <lastBuildDate>Thu, 05 Apr 2018 15:50:25 -0400</lastBuildDate>
    
	<atom:link href="https://rdf4j.eclipse.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rdf4j 2.5.4 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/08/14/rdf4j-2.5.4-released/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/08/14/rdf4j-2.5.4-released/</guid>
      <description>&lt;p&gt;Rdf4j 2.5.4 is a patch release containing several bug fixes, including:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 3.0.0 Milestone 2 available</title>
      <link>https://rdf4j.eclipse.org/news/2019/07/23/rdf4j-3.0.0-milestone-2-available/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/07/23/rdf4j-3.0.0-milestone-2-available/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re pleased to announce the second milestone build for rdf4j 3.0.0.&lt;/p&gt;

&lt;p&gt;Rdf4j 3.0 is a major new release of the rdf4j framework. It contains several &lt;a href=&#34;https://github.com/eclipse/rdf4j/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3A%22Not+backwards+compatible%22+-label%3A%22wontfix%22+milestone%3A3.0&#34; target=&#34;_blank&#34;&gt;backward incompatible changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some highlights:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 2.5.3 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/07/03/rdf4j-2.5.3-released/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/07/03/rdf4j-2.5.3-released/</guid>
      <description>&lt;p&gt;Rdf4j 2.5.3 is a patch release containing several bug fixes, including:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 3.0.0 Milestone 1 available</title>
      <link>https://rdf4j.eclipse.org/news/2019/06/29/rdf4j-3.0.0-milestone-1-available/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/06/29/rdf4j-3.0.0-milestone-1-available/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re pleased to announce the first milestone build for rdf4j 3.0.0.&lt;/p&gt;

&lt;p&gt;Rdf4j 3.0 is a major new release of the rdf4j framework. It contains several &lt;a href=&#34;https://github.com/eclipse/rdf4j/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3A%22Not+backwards+compatible%22+-label%3A%22wontfix%22+milestone%3A3.0&#34; target=&#34;_blank&#34;&gt;backward incompatible changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some highlights:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>new project website</title>
      <link>https://rdf4j.eclipse.org/news/2019/05/26/new-project-website/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/05/26/new-project-website/</guid>
      <description>&lt;p&gt;As you can see, we&amp;rsquo;ve given our website a fresh coat of paint. We&amp;rsquo;ve updated our site to use the Eclipse Solstice theme, and have unified our general website and documentation site in a single project. This makes updating, maintaining, and improving the site and the project documentation a lot easier.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 2.5.2 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/05/25/rdf4j-2.5.2-released/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/05/25/rdf4j-2.5.2-released/</guid>
      <description>&lt;p&gt;Rdf4j 2.5.2 is a patch release containing several bug fixes, including:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 2.5.1 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/04/06/rdf4j-2.5.1-released/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/04/06/rdf4j-2.5.1-released/</guid>
      <description>&lt;p&gt;Rdf4j 2.5.1 is a patch release containing bug fixes and a library update, including:
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 2.5.0 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/03/07/rdf4j-2.5.0-released/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/03/07/rdf4j-2.5.0-released/</guid>
      <description>&lt;p&gt;We are very pleased to announce the release of Eclipse rdf4j 2.5. This release addresses over 70 issues, and includes several major new features and improvements, including:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rdf4j 2.4.6 released</title>
      <link>https://rdf4j.eclipse.org/news/2019/03/02/rdf4j-2.4.6-released/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/news/2019/03/02/rdf4j-2.4.6-released/</guid>
      <description>&lt;p&gt;Release 2.4.6 is a patch release containing one bug fix.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://rdf4j.eclipse.org/about/</link>
      <pubDate>Thu, 05 Apr 2018 16:09:45 -0400</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/about/</guid>
      <description>The Eclipse rdf4j framework Eclipse rdf4j (formerly known as Sesame) is an open source Java framework for processing RDF data. This includes parsing, storing, inferencing and querying of/over such data. It offers an easy-to-use API that can be connected to all leading RDF storage solutions. It allows you to connect with SPARQL endpoints and create applications that leverage the power of linked data and Semantic Web.
Rdf4j offers two out-of-the-box RDF databases (the in-memory store and the native store), and in addition many third party storage solutions are available.</description>
    </item>
    
    <item>
      <title>Databases</title>
      <link>https://rdf4j.eclipse.org/databases/</link>
      <pubDate>Thu, 05 Apr 2018 16:09:45 -0400</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/databases/</guid>
      <description>Rdf4j databases The rdf4j core framework provides a set of vendor-neutral APIs for highly scalable storage, reasoning, and retrieval of RDF and OWL. Here, we list some available database solutions that implement the rdf4j APIs.
Core databases Rdf4j offers a set of database implementations out of the box.
The rdf4j Memory Store is a transactional RDF database using main memory with optional persistent sync to disk. It is fast with excellent performance for small datasets.</description>
    </item>
    
    <item>
      <title>Related projects</title>
      <link>https://rdf4j.eclipse.org/related/</link>
      <pubDate>Thu, 05 Apr 2018 16:09:45 -0400</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/related/</guid>
      <description>Related projects Several projects extend or make use of rdf4j in some way, and provide additional functionality on top of the core rdf4j framework.
 Sesame Tools
a collection of utility classes for use with Sesame/rdf4j. Apache Marmotta
a Linked Data publication platform Carml
a library that transforms structured sources to RDF based and declared in an RML mapping RML-Mapper
another RML mapping library Neosemantics
Neo4J extension to importing RDF into Neo4j and exposing graphs as RDF Rdf4j Schema Generator</description>
    </item>
    
    <item>
      <title>Creating SPARQL Queries with the SparqlBuilder</title>
      <link>https://rdf4j.eclipse.org/documentation/sparqlbuilder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/sparqlbuilder/</guid>
      <description>SparqlBuilder Introduction RDF4J SparqlBuilder is a fluent Java API used to programmatically create SPARQL query strings. It is based on the Spanqit query builder developed by Anqit Praqash, and has been slightly modified to allow tighter integration with the rest of the RDF4J framework.
SparqlBuilder allows the following SPARQL query:
PREFIX foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; SELECT ?name WHERE { ?x foaf:name ?name } ORDER BY ?name LIMIT 5 OFFSET 10  to be created as simply as:</description>
    </item>
    
    <item>
      <title>Creating custom SPARQL functions</title>
      <link>https://rdf4j.eclipse.org/documentation/custom-sparql-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/custom-sparql-functions/</guid>
      <description>Creating custom SPARQL functions The SPARQL query language is extensible by nature: it allows you to add your own custom functions if the standard set of operators is not sufficient for your needs. The RDF4J SPARQL engine has been designed with this extensibility in mind: you can define your own custom function and use it as part of your SPARQL queries.
In this short tutoral, we&amp;rsquo;ll create a simple custom function and add it RDF4J.</description>
    </item>
    
    <item>
      <title>Developer workflow and project management</title>
      <link>https://rdf4j.eclipse.org/documentation/developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/developer/</guid>
      <description>Developer Workflow and Project Management In this document the Eclipse rdf4j project workflow and developer best practices are explained. It contains information on how to create branches, tag releases, manage pull requests, create and schedule issues, and so on. Some of this information is targeted specifically at the project lead(s), other information is relevant to every committer.
Semantic Versioning Rdf4j strives to apply Semantic Versioning principles to its development:</description>
    </item>
    
    <item>
      <title>Eclipse rdf4j release notes</title>
      <link>https://rdf4j.eclipse.org/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/release-notes/</guid>
      <description>3.0.0 Rdf4j 3.0 is a major new release of the Eclipse rdf4j framework. Some highlights:
 Major improvements to the SHACL Sail Cleanup of core APIs (removing deprecated and obsolete code) Preparing rdf4j for Java 11&amp;frasl;12 compatibility Rdf4j Server / Workbench upgrade to Servlet API 3.1  For a complete overview, see all issues fixed in 3.0.
Upgrade notes Rdf4j 3.0 contains several backward incompatible changes. We distinguish changes that affect users of the Rdf4j tools (Console, Workbench, Server), changes that affect users of the Rdf4j APIs and libraries, and changes that affect third party Sail / Repository implementations.</description>
    </item>
    
    <item>
      <title>Full-text indexing with the Lucene SAIL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/lucene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/lucene/</guid>
      <description>Full text indexing with the Lucene SAIL The LuceneSail enables you to add full text search of RDF literals to find subject resources to any Sail stack. It provides querying support for the following statement patterns:
PREFIX search: &amp;lt;http://www.openrdf.org/contrib/lucenesail#&amp;gt; ?subj search:matches [ search:query &amp;quot;search terms...&amp;quot;; search:property my:property; search:score ?score; search:snippet ?snippet ] .  The &amp;lsquo;virtual&amp;rsquo; properties in the search: namespace have the following meaning:
 search:matches – links the resource to be found with the following query statements (required) search:query – specifies the Lucene query (required) search:property – specifies the property to search.</description>
    </item>
    
    <item>
      <title>GeoSPARQL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/geosparql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/geosparql/</guid>
      <description>GeoSPARQL RDF4J offers an extended algebra for partial GeoSPARQL support. When enabled, this offers additional geospatial functionality as part of the SPARQL engine, on top of any RDF4J repository, using the well-known Spatial4J and JTS libraries for geospatial reasoning.
To enable GeoSPARQL support, all you need to do is include the rdf4j-queryalgebra-geosparql Maven module in your project:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.rdf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;rdf4j-queryalgebra-geosparql&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  NOTE: this module is currently not included by default in the RDF4J Server, so if you plan to use GeoSPARQL in the RDF4J Server, you will need to download this jar separately and add it to the runtime classpath of the webapp.</description>
    </item>
    
    <item>
      <title>Getting started with rdf4j</title>
      <link>https://rdf4j.eclipse.org/documentation/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/getting-started/</guid>
      <description>Getting started with rdf4j Getting started with RDF is not hard! In this tutorial, we go through the basics of what RDF is and how you can use it, and we show how you can use the Eclipse rdf4j framework to create, process, store, and query RDF data. We assume that you know a little about programming in Java, but no prior knowledge on RDF is assumed.
TIP: The code examples in this tutorial are available for download from the examples directory in the rdf4j-doc GitHub repository.</description>
    </item>
    
    <item>
      <title>Parsing and Writing RDF with Rio</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/rio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/rio/</guid>
      <description>Parsing and Writing RDF with Rio The rdf4j framework includes a set of parsers and writers called Rio. Rio (“RDF I/O”) is a toolkit that can be used independently from the rest of rdf4j. In this chapter, we will take a look at various ways to use Rio to parse from or write to an RDF document. We will show how to do a simple parse and collect the results, how to count the number of triples in a file, how to convert a file from one syntax format to another, and how to dynamically create a parser for the correct syntax format.</description>
    </item>
    
    <item>
      <title>Rdf4j Binary RDF Format</title>
      <link>https://rdf4j.eclipse.org/documentation/rdf4j-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/rdf4j-binary/</guid>
      <description>RDF4J Binary RDF Format RDF4J supports reading and writing a custom binary RDF serialization format. Its main features are reduced parsing overhead and minimal memory requirements (for handling really long literals, amongst other things).
MIME Content Type RDF4J assigns the content type application/x-binary-rdf to its format.
Overall design Results encoded in the RDF4J Binary RDF format consist of a header followed by zero or more records, and closes with an END_OF_DATA marker (see below).</description>
    </item>
    
    <item>
      <title>Rdf4j Server, Workbench, and Console</title>
      <link>https://rdf4j.eclipse.org/documentation/server-workbench-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/server-workbench-console/</guid>
      <description>Installing Rdf4j Server and Rdf4j Workbench In this chapter, we explain how you can install Rdf4j Server (the actual database server and SPARQL endpoint service) and Rdf4j Workbench (a web-based client UI for managing databases and executing queries).
Required software Rdf4j Server and Rdf4j Workbench requires the following software:
 Java 8 Runtime Environment (either OpenJDK or Oracle Java) A Java Servlet Container that supports Java Servlet API 2.5 and Java Server Pages (JSP) 2.</description>
    </item>
    
    <item>
      <title>Reasoning and Validation with SPIN</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/spin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/spin/</guid>
      <description>Reasoning and Validation with SPIN The SPARQL Inferencing Notation (SPIN) is a way to represent a wide range of business rules on top of an RDF dataset. These rules can be anything from constraint validation to inferred property value calculation. Configuration
The SpinSail (currently in beta) is a StackedSail component that adds a forward-chaining SPIN rule engine on top of any store. In its most basic form it can be used directly on top of a Sail:</description>
    </item>
    
    <item>
      <title>Sesame to Eclipse rdf4j migration</title>
      <link>https://rdf4j.eclipse.org/documentation/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/migration/</guid>
      <description>Sesame to Eclipse rdf4j migration guide Eclipse rdf4j is the successor of the OpenRDF Sesame project. The Rdf4j framework and tools offer the same functionality, and will continue to be maintained and improved by the same team of developers as Sesame was, under Eclipse stewardship. For any users who wish to migrate their existing projects from Sesame to Rdf4j (and we certainly urge you to do so quickly), here’s an overview of what has changed.</description>
    </item>
    
    <item>
      <title>Setting up your development environment</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/setup/</guid>
      <description>Setup Before you can get started programming with rdf4j, you will need to set up your development environment, download the necessary, libraries, and so on. This chapter gives you some pointers on how to install the rdf4j libraries and how to initialize your project.
Using Apache Maven By far the most flexible and useful way to include rdf4j in your project, is to use Maven. Apache Maven is a software management tool that helps you by offering things like library version management and dependency management (which is very useful because it means that once you decide you need a particular rdf4j library, Maven automatically downloads all the libraries that your library of choice requires in turn).</description>
    </item>
    
    <item>
      <title>Starting a new Maven project in Eclipse</title>
      <link>https://rdf4j.eclipse.org/documentation/maven-eclipse-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/maven-eclipse-project/</guid>
      <description>Getting Started with rdf4j, Maven, and Eclipse The rdf4j programmer documentation is pretty extensive, but also perhaps a bit daunting, especially if you are relatively new to rdf4j, or indeed to tools like Eclipse IDE or Apache Maven. To help you get started, I will explain step by step how to use these tools to create a simple application.
NOTE: using Maven or Eclipse is not required if you want to use rdf4j.</description>
    </item>
    
    <item>
      <title>The RDF Model API</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/model/</guid>
      <description>The RDF Model API The RDF Model API is the core of the rdf4j framework. It provides the basic building blocks for manipulating RDF data in Java. In this chapter, we introduce these basic building blocks and show some examples on how to use them.
RDF Building Blocks: IRIs, literals, blank nodes and statements The core of the RDF4J framework is the RDF Model API (see the Model API Javadoc), defined in package org.</description>
    </item>
    
    <item>
      <title>The Repository API</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/repository/</guid>
      <description>The Repository API The Repository API is the central access point for rdf4j-compatible RDF databases (a.k.a. triplestores), as well as for SPARQL endpoints. Its purpose is to give a developer-friendly access point to RDF repositories, offering various methods for querying and updating the data, while hiding a lot of the nitty gritty details of the underlying machinery.
The interfaces for the Repository API can be found in package org.eclipse.rdf4j.repository. Several implementations for these interface exist in various sub-packages.</description>
    </item>
    
    <item>
      <title>The SAIL API</title>
      <link>https://rdf4j.eclipse.org/documentation/sail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/sail/</guid>
      <description>The SAIL API The SAIL (Storage And Inference Layer) API is a collection of interfaces designed for low-level transactional access to RDF data. It functions as a decoupling point between specific database implementations and the functional modules (parsers, query engines, end-user API access, etc) of the rdf4j framework.
Here, we document the design of the API and explain the roles and rationale behind the various interfaces. We also explain how various abstract base classes provided as part of the API can be reused by third-party implementors, in order to make implementing a SAIL-compatible database easier.</description>
    </item>
    
    <item>
      <title>The rdf4j REST API</title>
      <link>https://rdf4j.eclipse.org/documentation/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/rest-api/</guid>
      <description>The rdf4j server REST API The rdf4j server REST API is a HTTP Protocol that covers a fully compliant implementation of the SPARQL 1.1 Protocol W3C Recommendation. This ensures that rdf4j server functions as a fully standards-compliant SPARQL endpoint. The current version of the API additionally supports the SPARQL 1.1 Graph Store HTTP Protocol W3C Recommendation. The rdf4j REST API extends the W3C standards in several aspects, the most important of which is that it supports a full database transaction mechanism.</description>
    </item>
    
    <item>
      <title>Validation with SHACL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/shacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/shacl/</guid>
      <description>Validation with SHACL (new in RDF4J 2.5)
The SHapes Constraint Language (SHACL) is a language for validating RDF graphs.
This documentation is for RDF4J 2.5 and onwards, as the SHACL engine was experimental until this release.
How does the SHACL engine work The SHACL engine works by analyzing the changes made in a transaction and creating a set of validation plans (similar to query plans) and executing these as part of the transaction commit() call.</description>
    </item>
    
  </channel>
</rss>