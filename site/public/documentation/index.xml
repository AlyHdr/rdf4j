<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on Eclipse rdf4j</title>
    <link>https://rdf4j.eclipse.org/documentation/</link>
    <description>Recent content in Documentation on Eclipse rdf4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>webdev@eclipse-foundation.org (Christopher Guindon)</managingEditor>
    <webMaster>webdev@eclipse-foundation.org (Christopher Guindon)</webMaster>
    
	<atom:link href="https://rdf4j.eclipse.org/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating SPARQL Queries with the SparqlBuilder</title>
      <link>https://rdf4j.eclipse.org/documentation/sparqlbuilder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/sparqlbuilder/</guid>
      <description>SparqlBuilder Introduction RDF4J SparqlBuilder is a fluent Java API used to programmatically create SPARQL query strings. It is based on the Spanqit query builder developed by Anqit Praqash, and has been slightly modified to allow tighter integration with the rest of the RDF4J framework.
SparqlBuilder allows the following SPARQL query:
PREFIX foaf: &amp;lt;http://xmlns.com/foaf/0.1/&amp;gt; SELECT ?name WHERE { ?x foaf:name ?name } ORDER BY ?name LIMIT 5 OFFSET 10  to be created as simply as:</description>
    </item>
    
    <item>
      <title>Creating custom SPARQL functions</title>
      <link>https://rdf4j.eclipse.org/documentation/custom-sparql-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/custom-sparql-functions/</guid>
      <description>Creating custom SPARQL functions The SPARQL query language is extensible by nature: it allows you to add your own custom functions if the standard set of operators is not sufficient for your needs. The RDF4J SPARQL engine has been designed with this extensibility in mind: you can define your own custom function and use it as part of your SPARQL queries.
In this short tutoral, we&amp;rsquo;ll create a simple custom function and add it RDF4J.</description>
    </item>
    
    <item>
      <title>Developer workflow and project management</title>
      <link>https://rdf4j.eclipse.org/documentation/developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/developer/</guid>
      <description>Developer Workflow and Project Management In this document the Eclipse rdf4j project workflow and developer best practices are explained. It contains information on how to create branches, tag releases, manage pull requests, create and schedule issues, and so on. Some of this information is targeted specifically at the project lead(s), other information is relevant to every committer.
Semantic Versioning Rdf4j strives to apply Semantic Versioning principles to its development:</description>
    </item>
    
    <item>
      <title>Getting started with rdf4j</title>
      <link>https://rdf4j.eclipse.org/documentation/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/getting-started/</guid>
      <description>Getting started with rdf4j Getting started with RDF is not hard! In this tutorial, we go through the basics of what RDF is and how you can use it, and we show how you can use the Eclipse rdf4j framework to create, process, store, and query RDF data. We assume that you know a little about programming in Java, but no prior knowledge on RDF is assumed.
TIP: The code examples in this tutorial are available for download from the examples directory in the rdf4j-doc GitHub repository.</description>
    </item>
    
    <item>
      <title>Rdf4j Binary RDF Format</title>
      <link>https://rdf4j.eclipse.org/documentation/rdf4j-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/rdf4j-binary/</guid>
      <description>RDF4J Binary RDF Format RDF4J supports reading and writing a custom binary RDF serialization format. Its main features are reduced parsing overhead and minimal memory requirements (for handling really long literals, amongst other things).
MIME Content Type RDF4J assigns the content type application/x-binary-rdf to its format.
Overall design Results encoded in the RDF4J Binary RDF format consist of a header followed by zero or more records, and closes with an END_OF_DATA marker (see below).</description>
    </item>
    
    <item>
      <title>Rdf4j Server, Workbench, and Console</title>
      <link>https://rdf4j.eclipse.org/documentation/server-workbench-console/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/server-workbench-console/</guid>
      <description>Installing Rdf4j Server and Rdf4j Workbench In this chapter, we explain how you can install Rdf4j Server (the actual database server and SPARQL endpoint service) and Rdf4j Workbench (a web-based client UI for managing databases and executing queries).
Required software Rdf4j Server and Rdf4j Workbench requires the following software:
 Java 8 Runtime Environment (either OpenJDK or Oracle Java) A Java Servlet Container that supports Java Servlet API 2.5 and Java Server Pages (JSP) 2.</description>
    </item>
    
    <item>
      <title>Sesame to Eclipse rdf4j migration</title>
      <link>https://rdf4j.eclipse.org/documentation/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/migration/</guid>
      <description>Sesame to Eclipse rdf4j migration guide Eclipse rdf4j is the successor of the OpenRDF Sesame project. The Rdf4j framework and tools offer the same functionality, and will continue to be maintained and improved by the same team of developers as Sesame was, under Eclipse stewardship. For any users who wish to migrate their existing projects from Sesame to Rdf4j (and we certainly urge you to do so quickly), hereâ€™s an overview of what has changed.</description>
    </item>
    
    <item>
      <title>Starting a new Maven project in Eclipse</title>
      <link>https://rdf4j.eclipse.org/documentation/maven-eclipse-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/maven-eclipse-project/</guid>
      <description>Getting Started with rdf4j, Maven, and Eclipse The rdf4j programmer documentation is pretty extensive, but also perhaps a bit daunting, especially if you are relatively new to rdf4j, or indeed to tools like Eclipse IDE or Apache Maven. To help you get started, I will explain step by step how to use these tools to create a simple application.
NOTE: using Maven or Eclipse is not required if you want to use rdf4j.</description>
    </item>
    
    <item>
      <title>The SAIL API</title>
      <link>https://rdf4j.eclipse.org/documentation/sail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/sail/</guid>
      <description>The SAIL API The SAIL (Storage And Inference Layer) API is a collection of interfaces designed for low-level transactional access to RDF data. It functions as a decoupling point between specific database implementations and the functional modules (parsers, query engines, end-user API access, etc) of the rdf4j framework.
Here, we document the design of the API and explain the roles and rationale behind the various interfaces. We also explain how various abstract base classes provided as part of the API can be reused by third-party implementors, in order to make implementing a SAIL-compatible database easier.</description>
    </item>
    
    <item>
      <title>The rdf4j REST API</title>
      <link>https://rdf4j.eclipse.org/documentation/rest-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/rest-api/</guid>
      <description>The rdf4j server REST API The rdf4j server REST API is a HTTP Protocol that covers a fully compliant implementation of the SPARQL 1.1 Protocol W3C Recommendation. This ensures that rdf4j server functions as a fully standards-compliant SPARQL endpoint. The current version of the API additionally supports the SPARQL 1.1 Graph Store HTTP Protocol W3C Recommendation. The rdf4j REST API extends the W3C standards in several aspects, the most important of which is that it supports a full database transaction mechanism.</description>
    </item>
    
  </channel>
</rss>