<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming with rdf4j on Eclipse rdf4j</title>
    <link>https://rdf4j.eclipse.org/documentation/programming/</link>
    <description>Recent content in Programming with rdf4j on Eclipse rdf4j</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>webdev@eclipse-foundation.org (Christopher Guindon)</managingEditor>
    <webMaster>webdev@eclipse-foundation.org (Christopher Guindon)</webMaster>
    
	<atom:link href="https://rdf4j.eclipse.org/documentation/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Full-text indexing with the Lucene SAIL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/lucene/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/lucene/</guid>
      <description>Full text indexing with the Lucene SAIL The LuceneSail enables you to add full text search of RDF literals to find subject resources to any Sail stack. It provides querying support for the following statement patterns:
PREFIX search: &amp;lt;http://www.openrdf.org/contrib/lucenesail#&amp;gt; ?subj search:matches [ search:query &amp;quot;search terms...&amp;quot;; search:property my:property; search:score ?score; search:snippet ?snippet ] .  The &amp;lsquo;virtual&amp;rsquo; properties in the search: namespace have the following meaning:
 search:matches – links the resource to be found with the following query statements (required) search:query – specifies the Lucene query (required) search:property – specifies the property to search.</description>
    </item>
    
    <item>
      <title>GeoSPARQL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/geosparql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/geosparql/</guid>
      <description>GeoSPARQL RDF4J offers an extended algebra for partial GeoSPARQL support. When enabled, this offers additional geospatial functionality as part of the SPARQL engine, on top of any RDF4J repository, using the well-known Spatial4J and JTS libraries for geospatial reasoning.
To enable GeoSPARQL support, all you need to do is include the rdf4j-queryalgebra-geosparql Maven module in your project:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.rdf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;rdf4j-queryalgebra-geosparql&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  NOTE: this module is currently not included by default in the RDF4J Server, so if you plan to use GeoSPARQL in the RDF4J Server, you will need to download this jar separately and add it to the runtime classpath of the webapp.</description>
    </item>
    
    <item>
      <title>Parsing and Writing RDF with Rio</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/rio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/rio/</guid>
      <description>Parsing and Writing RDF with Rio The rdf4j framework includes a set of parsers and writers called Rio. Rio (“RDF I/O”) is a toolkit that can be used independently from the rest of rdf4j. In this chapter, we will take a look at various ways to use Rio to parse from or write to an RDF document. We will show how to do a simple parse and collect the results, how to count the number of triples in a file, how to convert a file from one syntax format to another, and how to dynamically create a parser for the correct syntax format.</description>
    </item>
    
    <item>
      <title>Reasoning and Validation with SPIN</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/spin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/spin/</guid>
      <description>Reasoning and Validation with SPIN The SPARQL Inferencing Notation (SPIN) is a way to represent a wide range of business rules on top of an RDF dataset. These rules can be anything from constraint validation to inferred property value calculation. Configuration
The SpinSail (currently in beta) is a StackedSail component that adds a forward-chaining SPIN rule engine on top of any store. In its most basic form it can be used directly on top of a Sail:</description>
    </item>
    
    <item>
      <title>Setting up your development environment</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/setup/</guid>
      <description>Setup Before you can get started programming with rdf4j, you will need to set up your development environment, download the necessary, libraries, and so on. This chapter gives you some pointers on how to install the rdf4j libraries and how to initialize your project.
Using Apache Maven By far the most flexible and useful way to include rdf4j in your project, is to use Maven. Apache Maven is a software management tool that helps you by offering things like library version management and dependency management (which is very useful because it means that once you decide you need a particular rdf4j library, Maven automatically downloads all the libraries that your library of choice requires in turn).</description>
    </item>
    
    <item>
      <title>The RDF Model API</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/model/</guid>
      <description>The RDF Model API The RDF Model API is the core of the rdf4j framework. It provides the basic building blocks for manipulating RDF data in Java. In this chapter, we introduce these basic building blocks and show some examples on how to use them.
RDF Building Blocks: IRIs, literals, blank nodes and statements The core of the RDF4J framework is the RDF Model API (see the Model API Javadoc), defined in package org.</description>
    </item>
    
    <item>
      <title>The Repository API</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/repository/</guid>
      <description>The Repository API The Repository API is the central access point for rdf4j-compatible RDF databases (a.k.a. triplestores), as well as for SPARQL endpoints. Its purpose is to give a developer-friendly access point to RDF repositories, offering various methods for querying and updating the data, while hiding a lot of the nitty gritty details of the underlying machinery.
The interfaces for the Repository API can be found in package org.eclipse.rdf4j.repository. Several implementations for these interface exist in various sub-packages.</description>
    </item>
    
    <item>
      <title>Validation with SHACL</title>
      <link>https://rdf4j.eclipse.org/documentation/programming/shacl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>webdev@eclipse-foundation.org (Christopher Guindon)</author>
      <guid>https://rdf4j.eclipse.org/documentation/programming/shacl/</guid>
      <description>Validation with SHACL (new in RDF4J 2.5)
The SHapes Constraint Language (SHACL) is a language for validating RDF graphs.
This documentation is for RDF4J 2.5 and onwards, as the SHACL engine was experimental until this release.
How does the SHACL engine work The SHACL engine works by analyzing the changes made in a transaction and creating a set of validation plans (similar to query plans) and executing these as part of the transaction commit() call.</description>
    </item>
    
  </channel>
</rss>